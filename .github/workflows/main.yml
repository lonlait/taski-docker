# Файл main.yml
# Имя workflow
name: Main Taski workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    # Блок services аналогичен docker-compose.yml
    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.12
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install setuptools
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt 
    # Запускаем flake8
    - name: Test with flake8 
      run: flake8 . --exclude=backend/venv312,venv,__pycache__,*.pyc
    # Этот шаг дополним переменными для доступа к БД
    - name: Test with flake8 and django tests
      # Команд стало больше одной; ставим символ | и пишем команды построчно
      # Добавляем env-переменные для доступа к БД
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db
        # Сервер БД запущен в Docker, но его порт проброшен на хост
        # Поэтому подключаемся к 127.0.0.1:5432
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        python -m flake8 backend/ --exclude=venv312,__pycache__,*.pyc
        cd backend/
        python manage.py test 

  frontend_tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18

    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci

    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: false
          tags: lonlait/taski_frontend:latest

  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: false
          tags: lonlait/taski_backend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./gateway/
          push: false
          tags: lonlait/taski_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер
    - name: Copy files via ssh
      uses: appleboy/scp-action@master
      # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml,frontend/,backend/,gateway/"
        target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          cd taski
          # Проверяем что файлы скопировались
          ls -la
          # Останавливаем все контейнеры и очищаем порты
          sudo docker compose -f docker-compose.production.yml down
          # Принудительно останавливаем все контейнеры
          sudo docker stop $(sudo docker ps -q) 2>/dev/null || true
          sudo docker rm $(sudo docker ps -aq) 2>/dev/null || true
          # Очищаем неиспользуемые ресурсы
          sudo docker system prune -f
          # Проверяем что порт 8080 свободен
          sudo netstat -tlnp | grep :8080 || echo "Port 8080 is free"
          # Удаляем старые volumes если есть
          sudo docker volume rm taski_static taski_postgres_data 2>/dev/null || true
          # Собираем образы локально
          sudo docker build -t lonlait/taski_frontend:latest frontend/
          sudo docker build -t lonlait/taski_backend:latest backend/
          sudo docker build -t lonlait/taski_gateway:latest gateway/
          # Запускаем контейнеры
          sudo docker compose -f docker-compose.production.yml up -d
          # Ждем запуска базы данных
          sleep 20
          # Проверяем статус контейнеров
          sudo docker compose -f docker-compose.production.yml ps
          # Выполняем миграции и сбор статики
          sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec -T backend python manage.py collectstatic --noinput
          # Проверяем что статические файлы собрались
          sudo docker compose -f docker-compose.production.yml exec -T backend ls -la /app/collected_static/
          # Копируем статические файлы только если они есть
          sudo docker compose -f docker-compose.production.yml exec -T backend sh -c "if [ -d /app/collected_static ] && [ \"\$(ls -A /app/collected_static)\" ]; then cp -r /app/collected_static/* /app/backend_static/; else echo 'No static files to copy'; fi"
          # Настраиваем nginx для проксирования на домен (HTTP и HTTPS)
          sudo tee /etc/nginx/sites-available/gopto.hopto.org << 'EOF'
          server {
              listen 80;
              server_name gopto.hopto.org;
              
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          
          server {
              listen 443 ssl;
              server_name gopto.hopto.org;
              
              ssl_certificate /etc/letsencrypt/live/gopto.hopto.org/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/gopto.hopto.org/privkey.pem;
              
              location / {
                  proxy_pass http://localhost:8000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }
          EOF
          # Активируем конфигурацию
          sudo ln -sf /etc/nginx/sites-available/gopto.hopto.org /etc/nginx/sites-enabled/
          # Проверяем конфигурацию nginx
          sudo nginx -t
          # Перезапускаем nginx
          sudo systemctl reload nginx
          # Проверяем SSL сертификат и получаем если нужно (пропускаем если есть ошибки)
          if [ ! -f /etc/letsencrypt/live/gopto.hopto.org/fullchain.pem ]; then
            sudo certbot --nginx -d gopto.hopto.org --non-interactive --agree-tos --email admin@gopto.hopto.org || echo "SSL certificate setup skipped"
          fi

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          🚀 Taski успешно развернут!
          
          🌐 Домен: https://gopto.hopto.org
          📊 Статус: ✅ Успешно
          🕐 Время: ${{ github.event.head_commit.timestamp }}
          
          Коммит: ${{ github.event.head_commit.message }}